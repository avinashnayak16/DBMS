DROP TABLE WAREHOUSE_STORAGE CASCADE CONSTRAINTS;
DROP TABLE WAREHOUSE CASCADE CONSTRAINTS;
DROP TABLE INVOICE CASCADE CONSTRAINTS;
DROP TABLE SUPPLIER CASCADE CONSTRAINTS;
DROP TABLE CATEGORYS CASCADE CONSTRAINTS;
DROP TABLE PRODUCT CASCADE CONSTRAINTS;
DROP TABLE ORDERS CASCADE CONSTRAINTS;
DROP TABLE CUSTOMERS CASCADE CONSTRAINTS;


CREATE TABLE CUSTOMERS (
  customer_id int PRIMARY KEY,
  customer_name varchar(255),
  address varchar(255), 
  phone_number varchar(20),
  email_address varchar(255)
);
CREATE TABLE ORDERS (
  order_id int PRIMARY KEY,
  customer_id int,
  order_date date,  
  expected_delivery_date date,
  order_status varchar(50),
  FOREIGN KEY (customer_id) REFERENCES CUSTOMERS(customer_id)
);

CREATE TABLE CATEGORYS (
  category_id int PRIMARY KEY,
  category_name varchar(255)  
);
CREATE TABLE SUPPLIER (
  supplier_id int PRIMARY KEY,
  supplier_name varchar(255),
  address varchar(255),
  phone_number varchar(20),
  email_address varchar(255)
);
CREATE TABLE PRODUCT (
  product_id int PRIMARY KEY,
  product_name varchar(255),
  category_id int,
  supplier_id int,
  price decimal(10,2),
  stock_level int,
  FOREIGN KEY (category_id) REFERENCES CATEGORYS(category_id),
  FOREIGN KEY (supplier_id) REFERENCES SUPPLIER(supplier_id)
);
CREATE TABLE INVOICE (
  invoice_id int PRIMARY KEY,
  order_id int,
  product_id int,
  quantity int,
  total_amount decimal(10,2),
  FOREIGN KEY (order_id) REFERENCES ORDERS(order_id),
  FOREIGN KEY (product_id) REFERENCES PRODUCT(product_id)
);
CREATE TABLE WAREHOUSE (
  warehouse_id int PRIMARY KEY,
  warehouse_name varchar(255),
  location varchar(255),
  capacity int  
);
CREATE TABLE WAREHOUSE_STORAGE (
  product_id int,
  warehouse_id int,
  stock_level int, 
  FOREIGN KEY (product_id) REFERENCES PRODUCT(product_id),
  FOREIGN KEY (warehouse_id) REFERENCES WAREHOUSE(warehouse_id)
);




INSERT INTO CUSTOMERS VALUES(1, 'John Doe', '123 Main Street', '555-1234', 'john@example.com');
INSERT INTO CUSTOMERS VALUES(2, 'Jane Smith', '456 Oak Avenue', '555-5678', 'jane@example.com');
INSERT INTO CUSTOMERS VALUES(3, 'Bob Johnson', '789 Elm Street', '555-9876', 'bob@example.com');
INSERT INTO CUSTOMERS VALUES(4, 'Alice Brown', '101 Pine Road', '555-4321', 'alice@example.com');
INSERT INTO CUSTOMERS VALUES(5, 'Charlie Davis', '202 Cedar Lane', '555-8765', 'charlie@example.com');
INSERT INTO CUSTOMERS VALUES(6, 'Eva Johnson', '303 Maple Lane', '555-6789', 'eva@example.com');
INSERT INTO CUSTOMERS VALUES(7, 'David Smith', '789 Oak Avenue', '555-7890', 'david@example.com');
INSERT INTO CUSTOMERS VALUES(8, 'Eva Johnson', '456 Pine Street', '555-6789', 'eva@example.com');
INSERT INTO CUSTOMERS VALUES(10, 'Alice Brown', '456 Oak Avenue', '555-4321', 'alice@example.com');




INSERT INTO ORDERS VALUES(101, 1, TO_DATE('2023-01-15', 'YYYY-MM-DD'), TO_DATE('2023-01-20', 'YYYY-MM-DD'), 'Shipped');
INSERT INTO ORDERS VALUES(102, 2, TO_DATE('2023-02-01', 'YYYY-MM-DD'), TO_DATE('2023-02-10', 'YYYY-MM-DD'), 'Pending');
INSERT INTO ORDERS VALUES(103, 3, TO_DATE('2023-03-10', 'YYYY-MM-DD'), TO_DATE('2023-03-18', 'YYYY-MM-DD'), 'Delivered');
INSERT INTO ORDERS VALUES(104, 4, TO_DATE('2023-04-05', 'YYYY-MM-DD'), TO_DATE('2023-04-15', 'YYYY-MM-DD'), 'Shipped');
INSERT INTO ORDERS VALUES(105, 5, TO_DATE('2023-05-20', 'YYYY-MM-DD'), TO_DATE('2023-05-25', 'YYYY-MM-DD'), 'Pending');
INSERT INTO ORDERS VALUES(106, 1, TO_DATE('2023-06-01', 'YYYY-MM-DD'), TO_DATE('2023-06-10', 'YYYY-MM-DD'), 'Pending');
INSERT INTO ORDERS VALUES(107, 2, TO_DATE('2023-06-15', 'YYYY-MM-DD'), TO_DATE('2023-06-25', 'YYYY-MM-DD'), 'Shipped');
INSERT INTO ORDERS VALUES(108, 3, TO_DATE('2023-07-01', 'YYYY-MM-DD'), TO_DATE('2023-07-10', 'YYYY-MM-DD'), 'Pending');


INSERT INTO CATEGORYS VALUES(1, 'Electronics');
INSERT INTO CATEGORYS VALUES(2, 'Clothing');
INSERT INTO CATEGORYS VALUES(3, 'Home Appliances');
INSERT INTO CATEGORYS VALUES(4, 'Books');
INSERT INTO CATEGORYS VALUES(5, 'Toys');


INSERT INTO SUPPLIER VALUES(1, 'Tech Solutions', '123 Tech Street', '555-1111', 'info@techsolutions.com');
INSERT INTO SUPPLIER VALUES(2, 'Fashion World', '456 Fashion Avenue', '555-2222', 'info@fashionworld.com');
INSERT INTO SUPPLIER VALUES(3, 'Home Innovations', '789 Home Street', '555-3333', 'info@homeinnovations.com');
INSERT INTO SUPPLIER VALUES(4, 'Book Haven', '101 Book Road', '555-4444', 'info@bookhaven.com');
INSERT INTO SUPPLIER VALUES(5, 'Toy Emporium', '202 Toy Lane', '555-5555', 'info@toyemporium.com');


INSERT INTO PRODUCT VALUES(1, 'Smartphone', 1, 1, 599.99, 100);
INSERT INTO PRODUCT VALUES(2, 'T-Shirt', 2, 2, 19.99, 500);
INSERT INTO PRODUCT VALUES(3, 'Refrigerator', 3, 3, 899.99, 30);
INSERT INTO PRODUCT VALUES(4, 'Novel', 4, 4, 9.99, 200);
INSERT INTO PRODUCT VALUES(5, 'Action Figure', 5, 5, 29.99, 50);
INSERT INTO PRODUCT VALUES(6, 'Laptop', 1, 1, 999.99, 50);


INSERT INTO INVOICE VALUES(1, 101, 1, 2, 1199.98);
INSERT INTO INVOICE VALUES(2, 102, 2, 5, 99.95);
INSERT INTO INVOICE VALUES(3, 103, 3, 1, 899.99);
INSERT INTO INVOICE VALUES(4, 104, 4, 3, 29.97);
INSERT INTO INVOICE VALUES(5, 105, 5, 4, 119.96);
INSERT INTO INVOICE VALUES(6, 106, 1, 120, 7199.80);
INSERT INTO INVOICE VALUES(7, 107, 2, 600, 11994.00);
INSERT INTO INVOICE VALUES(8, 108, 3, 35, 6999.65);
INSERT INTO INVOICE VALUES(9, 106, 1, 120, 7199.80);
INSERT INTO INVOICE VALUES(10, 107, 2, 600, 11994.00);
INSERT INTO INVOICE VALUES(11, 108, 3, 35, 6999.65);


INSERT INTO WAREHOUSE VALUES(1, 'Main Warehouse', 'City Center', 10000);
INSERT INTO WAREHOUSE VALUES(2, 'Secondary Warehouse', 'Industrial Area', 5000);
INSERT INTO WAREHOUSE VALUES(3, 'Backup Warehouse', 'Suburb Area', 2000);


INSERT INTO WAREHOUSE_STORAGE VALUES(1, 1, 50);
INSERT INTO WAREHOUSE_STORAGE VALUES(2, 1, 100);
INSERT INTO WAREHOUSE_STORAGE VALUES(3, 2, 25);
INSERT INTO WAREHOUSE_STORAGE VALUES(4, 2, 10);
INSERT INTO WAREHOUSE_STORAGE VALUES(5, 3, 15);



SELECT *
FROM CUSTOMERS;

SELECT *
FROM ORDERS;

SELECT *
FROM CATEGORYS;

SELECT *
FROM SUPPLIER;

SELECT *
FROM PRODUCT;

SELECT *
FROM INVOICE;

SELECT *
FROM WAREHOUSE;

SELECT * 
FROM WAREHOUSE_STORAGE;


/Show customer names and order details/
SELECT c.customer_name, o.order_id, o.order_date, o.order_status
FROM customers c, orders o
WHERE c.customer_id = o.customer_id;

/*Show order details with product and supplier info */
SELECT o.order_id, p.product_name, s.supplier_name, i.quantity, i.total_amount
FROM orders o, invoice i, product p, supplier s
WHERE o.order_id = i.order_id
  AND i.product_id = p.product_id
  AND p.supplier_id = s.supplier_id;

/*Show products stored in each warehouse */
SELECT p.product_name, w.warehouse_name, ws.stock_level
FROM product p, warehouse_storage ws, warehouse w
WHERE p.product_id = ws.product_id
  AND ws.warehouse_id = w.warehouse_id;

/Show customer orders with product and category details/
SELECT c.customer_name, o.order_id, p.product_name, cat.category_name
FROM customers c, orders o, invoice i, product p, categorys cat
WHERE c.customer_id = o.customer_id
  AND o.order_id = i.order_id
  AND i.product_id = p.product_id
  AND p.category_id = cat.category_id;

/Total amount invoiced by product category/
SELECT cat.category_name, SUM(i.total_amount) AS total_invoiced
FROM invoice i, product p, categorys cat
WHERE i.product_id = p.product_id
  AND p.category_id = cat.category_id
GROUP BY cat.category_name;

/Customers with email from particular domains/
SELECT *
FROM customers
WHERE email_address LIKE '%.com';

/Orders placed in January 2023/
SELECT * FROM orders
WHERE order_date BETWEEN '01-JAN-2023' AND '31-JAN-2023';

/* Products with high stock levels than 50 */
SELECT *
FROM product
WHERE stock_level > 50;


/High value invoices/
SELECT * FROM invoice
WHERE total_amount > 500;

-- Show customer names and their orders with order date not in January
SELECT c.customer_name, o.order_id, o.order_date, o.order_status
FROM customers c, orders o
WHERE c.customer_id = o.customer_id
  AND EXTRACT(MONTH FROM o.order_date) <> 1;



/Number of orders per customer/
SELECT customer_id, COUNT(order_id) num_orders
FROM orders
GROUP BY customer_id;

/Number of orders per status/
SELECT order_status, COUNT(order_id) order_count
FROM orders
GROUP BY order_status;

/Total invoices per product/
SELECT product_id, SUM(total_amount) total_invoiced
FROM invoice
GROUP BY product_id;

/Average invoice amount per order ID/
SELECT order_id, AVG(total_amount) as avg_invoice
FROM invoice
GROUP BY order_id;


-- Display top 2 warehouses with highest storage capacity along with details without FETCH FIRST or LIMIT
SELECT w.*
FROM (
    SELECT ws.warehouse_id, SUM(ws.stock_level) AS total_stock
    FROM warehouse_storage ws
    GROUP BY ws.warehouse_id
) w
WHERE (
    SELECT COUNT(DISTINCT ws2.warehouse_id)
    FROM warehouse_storage ws2
    WHERE w.total_stock <= (SELECT SUM(ws3.stock_level) FROM warehouse_storage ws3 WHERE ws3.warehouse_id = ws2.warehouse_id)
) <= 3;


-- Categories with less than 3 products without (+) syntax
SELECT c.category_name, COUNT(p.product_id) AS num_products
FROM categorys c
LEFT JOIN product p ON c.category_id = p.category_id
GROUP BY c.category_name
HAVING COUNT(p.product_id) < 3;


/Customers with average order over 500/
SELECT customer_id, AVG(total_amount) avg_order
FROM orders o, invoice i
WHERE o.order_id = i.order_id
GROUP BY customer_id
HAVING AVG(total_amount) > 500;

-- Show customers and their total order amounts using correlated subquery
SELECT
    customer_id,
    customer_name,
    (
        SELECT SUM(total_amount)
        FROM invoice i
        WHERE c.customer_id = (SELECT o.customer_id FROM orders o WHERE o.order_id = i.order_id)
    ) AS total_order_amount
FROM customers c;



/Product categories exceeding 1000 in total invoiced amount/
SELECT c.category_name, SUM(i.total_amount) total_invoiced
FROM invoice i, product p, categorys c
WHERE i.product_id = p.product_id
  AND p.category_id = c.category_id
GROUP BY c.category_name
HAVING SUM(i.total_amount) > 1000;


/*Customers with no orders */
SELECT * FROM customers
WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM orders);

/Products not ordered/
SELECT * FROM product
WHERE product_id NOT IN (SELECT DISTINCT product_id FROM invoice);







/Order quantity higher than product stock level/
SELECT * FROM invoice i
WHERE i.quantity > (SELECT p.stock_level
                   FROM product p
                   WHERE p.product_id = i.product_id);

/Get warehouse with highest storage capacity/
SELECT * FROM warehouse
WHERE capacity = (SELECT MAX(capacity) FROM warehouse);


-- Customers from the city with more than 2 customers
SELECT customer_id, customer_name, address, phone_number, email_address
FROM customers c
WHERE address = (
    SELECT address
    FROM customers c2
    GROUP BY address
    HAVING COUNT(*) >= 2
);


/Highest invoice amount for each order/
SELECT order_id, product_id, total_amount FROM invoice i1
WHERE total_amount = (SELECT MAX(total_amount)
                      FROM invoice i2
                      WHERE i1.order_id = i2.order_id);

/Calculate price deduction to reduce stock/
UPDATE product
SET price = price -
            (SELECT AVG(price) * 0.1
             FROM product
             WHERE stock_level > 100);

-- Delete invoices with the lowest amount per order
DELETE FROM invoice
WHERE (order_id, total_amount) IN (
    SELECT order_id, MIN(total_amount) as min_amount
    FROM invoice
    GROUP BY order_id
);


/Retrieve customer info for highest value order/
SELECT c.*
FROM customers c, (
    SELECT customer_id, MAX(total_amount) amt
    FROM orders o, invoice i
    WHERE o.order_id = i.order_id
    GROUP BY customer_id
) temp
WHERE c.customer_id = temp.customer_id;

/Find suppliers with more than 1 products/
SELECT s.*
FROM supplier s
WHERE (SELECT COUNT(*)
       FROM product p
       WHERE p.supplier_id = s.supplier_id) > 1;


/Show only product and supplier names/
SELECT p.product_name,
      (SELECT s.supplier_name
       FROM supplier s
       WHERE s.supplier_id = p.supplier_id) AS supplier_name
FROM product p;

/Find customers with higher than average orders/
SELECT *
FROM customers c1
WHERE (SELECT COUNT(order_id)
       FROM orders
       WHERE customer_id = c1.customer_id) >
     (SELECT AVG(c2.order_count)
      FROM (SELECT customer_id, COUNT(order_id) order_count
            FROM orders
            GROUP BY customer_id) c2);
            
/Create view for top customers/
CREATE VIEW top_customers AS  
SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS order_count
FROM customers c, orders o
WHERE c.customer_id = o.customer_id
GROUP BY c.customer_id, c.customer_name
ORDER BY order_count DESC;

/View for order invoice details/
CREATE VIEW order_invoices AS
SELECT o.order_id, o.order_date, o.order_status, 
       i.invoice_id, i.total_amount
FROM orders o, invoice i
WHERE o.order_id = i.order_id;
   
/View to show low stock warning/  
CREATE VIEW stock_warning AS
SELECT p.product_id, p.product_name, p.stock_level 
FROM product p
WHERE p.stock_level < 10;

/View for supplier contact information/
CREATE VIEW supplier_info AS  
SELECT supplier_id, supplier_name, address, phone_number, email_address
FROM supplier;




/Select from top customers view/
SELECT * FROM top_customers;

/Select from order invoices view/  
SELECT * FROM order_invoices;

/Select from stock warning view/
SELECT * FROM stock_warning;

/Select from supplier info view/
SELECT * FROM supplier_info;


DROP VIEW order_invoices;
DROP VIEW top_customers; 

DROP VIEW cust_orders;

DROP VIEW stock_warning;  

DROP VIEW supplier_info;